//
//  M O D E L S
//
//  Get a model object and populate its values across the board  (populate)
//  1-way binding model -> view


populate = function(exchange, scopes, index, page) {

    scopes.filter(Boolean).forEach(function($scope) {
      populateExchange(exchange, $scope, index, page)
          .then(function() {console.log('exchange ' + exchange.id + ' - populateExchange succeeded for $scope: ', $scope)})
          .catch(function(error) {console.error(error)})
    });

    getPano(exchange)
        .then(function(pano) {
          scopes.filter(Boolean).forEach(function($scope) {populateStaticStreeview(exchange, pano, $scope)})
        });

    fetchPlace(exchange)
        .then(function(place) {
          scopes.filter(Boolean).forEach(function($scope) {populatePlace(exchange, place, $scope)})
        });

    findDuration(exchange)
        .then(function(matrix) {
          scopes.filter(Boolean).forEach(function($scope) {populateDuration(exchange, matrix, $scope)})
        });

};

populateOrder = function($scope, order) {

  $scope.find('[data-model=order][data-field]').each(function() {
    var $this = $(this);
    var field = $this.data('field');
    var value = order[field];
    $this.html(value);
  });

};

populateExchange = function(exchange, $scope, index, page) {

  console.log('exchange ' + exchange.id + ' - populateExchange. $scope: ', $scope);

  return new Promise(function(resolve, reject) {

    if (index == 0) $scope.addClass('best');

    $scope.find('.ecard').addBack('.ecard').attr({'data-exchange-id': exchange.id, 'data-page': page});

    $scope.find('#streetview').attr('id', 'streetview' + exchange.id);

    $scope.find('[data-model=exchange][data-field]').each(function() {
      var $this = $(this);
      var field = $this.data('field');
      var value = exchange[field];
      $this.html(value);
    });

    if (!exchange.gain || exchange.gain < 0) {
      $scope.find('.comparison').css('visibility', 'hidden');
      $scope.find('.comparison_text').css('visibility', 'hidden');
      $scope.find('.offer_line.saving').css('visibility', 'hidden');
    }

    var $phone_link = $scope.find('.phone_icon a');
    if (exchange.phone) {
      $phone_link.attr('href', 'tel:' + exchange.phone)
    } else {
      $phone_link.css('visibility', 'hidden')
    }

    if (exchange.base_rate) {
      if (index == 0) {
        var src = '<%= asset_path 'circle_crown.png' %>';
        var html = '<img src=' + src + '>';
        $scope.find('.ranking').html(html);
      } else {
        $scope.find('.ranking').html(index + 1);
      }
    } else {
      $scope.find('[data-field=edited_quote_rounded]').css('margin-top', '0');
      $scope.find('.comparison').css('display', 'none');
      $scope.find('.ranking').css('display', 'none');
      $scope.find('.norates').css('display', 'block');
      $scope.find('.deal.section').css('display', 'none');
      $scope.find('.no_deal_section').css('display', 'flex');
      $scope.addClass('norate').addClass(exchange.contract ? 'contract' : 'no_contract');
    }

      $scope.find('[data-field=rating]').rating(ratingOptions).rating('update', 0);

    var time = new Date();
    time.setHours(time.getHours() + 4);
    $scope.find('[data-field=expiry_time]').html(time.toLocaleString('en-GB', {"hour":"numeric","minute":"numeric"}));

  //  console.log('setting arctext to radius: ', windowHeight / 10);
  //  $scope.find('.order_word').arctext({radius: Math.floor(windowHeight / 10), dir: -1})

    resolve();

  })

};



populateHelp = function(help, $scope) {

    $scope.find('.help_topic').html(help.topic);
    $scope.find('.help_content').html(help.content);

};

// To supress live streetview - comment the if, leave return only
populateStreetview = function(exchange) {

    if (exchange.photo || (exchange.pano && exchange.pano.status == "ZERO_RESULTS")) return;

    var sv = new google.maps.StreetViewService();
    var panorama = new google.maps.StreetViewPanorama(document.getElementById('streetview' + exchange.id),
        {
            linksControl: false,
            addressControl: false,
            fullscreenControl: false,
            enableCloseButton: false
        }
    );
    sv.getPanorama({
        location: {lat: exchange.latitude, lng: exchange.longitude},
        radius: 50,
        source: google.maps.StreetViewSource.OUTDOOR
    },
        function(data, status) {
            processSVData(exchange, panorama, data, status)
    });

};


function processSVData(exchange, panorama, data, status) {
  if (status === 'OK') {

    panorama.setPano(data.location.pano);
    panorama.setPov({
      heading: 0,
      pitch: 0
    });
    panorama.setVisible(true);

  } else {

/*
    var $streetview = $('#streetview' + exchange.id);
    var src = '<%= asset_path 'def_streetview.png' %>';
    var html = '<img src=' + src + '>';
    $('#streetview').html(html);
*/

    console.error('Street View data not found for this location.');
  }
}

populateDuration = function(exchange, matrix, $scope) {
//    console.log('exchange ' + exchange.id + ' - populateDuration');
    $scope.find('[data-model=exchange][data-field=duration]').html(exchange.matrix.duration);
};


populatePlace = function(exchange, place, $scope) {


    // place in fact is already in the exchange so nothing is done with that parameter and exchange.place is queried instead

    console.log('exchange ' + exchange.id + ' - populatePlace');

    // User photo - currently wildcarded for 2 reasons:
    // - isn't displayed properly (isn't confined to the card, captures the entire height of the grey ribbon)
    // - sometimes returned with 403 status, leaving an ugly 'no photo' icon

/*
    $photo = $scope.find('.photo');
    if ($photo && exchange.place.photo) {
        var src         = exchange.place.photo.getUrl({'maxWidth': streetviewWidth, 'maxHeight': halfBodyHeight});
        var html        = '<img src=' + src + '>';
        $photo.html(html);
     }
*/

    var reviews_length = exchange.place.reviews && exchange.place.reviews.length;
    if (reviews_length) {
        $scope.find('[data-field=reviews]').html(reviews_length);
        $scope.find('.review_word').html(pluralize('review', reviews_length));
    }

    var rating = exchange.rating || exchange.place.rating || 0;
    if (rating > 0) $scope.find('[data-field=rating]').rating('update', rating);


    /// Potential other overrides from GP: opening hours, phone, website, google page?! ("more")

};

populateReviews = function(exchange, $scope) {

    var review_template = $('.review.template');
    var reviews_list = $scope.find('.reviews_list').empty();

    if (!exchange.place || !exchange.place.reviews || !exchange.place.reviews.length > 0) return;

    exchange.place.reviews.forEach(function(review) {

        var review_el = review_template.clone().removeClass('template');

        if (review.rating) {
            review_el.find('.review_rating input')
                .rating(ratingOptions)
                .rating('update', review.rating);
        }
        if (review.text)                review_el.find('.review_text').html(review.text);
        if (review.author_name)         review_el.find('.list-group-item-heading').html(review.author_name);
        if (review.profile_photo_url)   {
            review_el.find('.row-picture').addClass('photo').find('.review_photo').attr('src', review.profile_photo_url);
        } else {
            review_el.find('.row-picture').addClass('icon');
        }

        reviews_list.append(review_el);

    });

};


// populate search params in search form and navbar
// values are either defaults or taken from ss is this is refresh
// part of what used to be restore()
populateParams = function() {

    var value_of_pay_amount = value_of('pay_amount');
    var value_of_buy_amount = value_of('buy_amount');
    var def = def_vals();

    searchParams.forEach(function(key) {

        if (key == 'buy_amount') {
            set('buy_amount',   value_of_buy_amount || (value_of_pay_amount ? null : def['buy_amount']))
        } else
        if (key == 'pay_amount') {
            set('pay_amount',   value_of_pay_amount || (value_of_buy_amount ? null : def['pay_amount']))
        } else {
            set(key,            value_of(key)       || def[key])
        }

    });

    bind_currency_to_autonumeric();
    $('.version').html(version);
    paramsPopulated = true;

};

populateParamsByLocation = function(local_currency) {

  set('buy_currency', local_currency);
  set('pay_currency', (local_currency == 'USD') ? 'EUR' : 'USD');

};


value_of = function(key) {
    if (typeof(key) === "undefined") return null;
    var a = sessionStorage.getItem(key);
    return (a && a != "null") ? a : null;
};

// Populate search params in search form, search bar and ss for persistency (page reloads)
set = function(field, value, trigger) {

//    console.log('set ' + field + ' to ' + value);

    value = (field.indexOf('amount') > -1) ? String(value).replace(/[^0-9\.]+/g,"") : value;
    $('.params [data-model=search][data-field=' + field + ']').html(value);

    var $formField = $('#search_form [data-model=search][data-field=' + field + ']').val(value);
    if (value !== '') {
        $formField.closest('.form-group').removeClass('is-empty').addClass('is-filled');
    } else {
        $formField.closest('.form-group').addClass('is-empty').removeClass('is-filled');
    }
     sessionStorage.setItem(field, value);

};

getPano = function(exchange) {

    return new Promise(function(resolve, reject) {

      if (exchange.pano) {
        resolve(exchange.pano);
        return
      }

      var url = streetviewUrl(exchange, {metadata: true});
        fetch(url)
            .then(function(stream) {return(stream.json())})
            .then(function(jsonString) {
                exchange.pano = jsonString;
                resolve(jsonString);
            })
            .catch(showError)

    })

};

streetviewUrl = function(exchange, options) {

    var metadata    = options.metadata;
    var size        = streetviewWidth + 'x' + streetviewHeight;
    var url;

    url = 'https://maps.googleapis.com/maps/api/streetview';
    if (metadata) url += '/metadata';
    url += '?size=' + size;
    if (exchange.pano && exchange.pano.pano_id) {
        url += '&pano=' + exchange.pano.pano_id;
    } else {
        url += '&location=' + exchange.latitude + ',' + exchange.longitude;
    }
    url += '&key=' + google_api_key;

    return url;
};

populateStaticStreeview = function(exchange, pano, $scope) {


  // pano is in fact already in the exchange so nothing is done with that parameter, and exchange.pano is queried instead

  //console.log('populateStaticStreetview. Pano: ', exchange.pano);

  var $mini_streetview = $scope.find('.minicard .streetview');
  var $full_streetview = $scope.find('.fullcard .streetview');

  if (exchange.photo) {

        var src = exchange.photo;
        var html = '<img src=' + src + '>';

        $mini_streetview.html(html);
        $full_streetview.html(html);

    } else if (exchange.pano && exchange.pano.status == "ZERO_RESULTS") {

        var src = '<%= asset_path 'def_streetview.png' %>';
        var html = '<img src=' + src + '>';

        $mini_streetview.html(html);
        $full_streetview.html(html);

      } else {

        var src = streetviewUrl(exchange, {metadata: false});
        var html = '<img src=' + src + '>';

        $mini_streetview.html(html);
        $full_streetview.html(html);

      }
 };

